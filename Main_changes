pwrThresh definition on PATH/simulations/networks/CAIN.ned - line 35 
	part of EnbInfo at PATH/src/common/LteCommon.h (line 791)
	initialized at PATH/src/stack/mac/layer/LteMacEnb.cc (line 301)

std::map<MacNodeId,double> sinrMapB -> list of devices with sinr that are better than the threshold at PATH/src/common/LteCommon.h (line 776)
	struct is part of EnbInfo at PATH/src/common/LteCommon.h (line 791)
	initialized at PATH/src/stack/mac/layer/LteMacEnb.cc (line 299)
std::map<MacNodeId,double> sinrMapW -> list of devices with sinr that are worse than the threshold at PATH/src/common/LteCommon.h (line 777)
	struct is part of EnbInfo at PATH/src/common/LteCommon.h (line 791)
	initialized at PATH/src/stack/mac/layer/LteMacEnb.cc (line 300)

std::map<MacNodeId,double> relayList -> list of possible relays at PATH/src/common/LteCommon.h (line 787)
	struct is part of UeInfo at PATH/src/common/LteCommon.h (line 834)
	initialized at PATH/src/stack/mac/layer/LteMacUe.cc (line 78)

std::vector<MacNodeId> rep_list -> list of nodes that did not send a REP message to relay at PATH/src/common/LteCommon.h (line 790)
	struct is part of UeInfo at PATH/src/common/LteCommon.h (line 835)
	initialized at PATH/src/stack/mac/layer/LteMacUe.cc (line 79)


HAD TO COMMENT line 81 from inet/src/inet/transportlayer/tcp/TCPConnectionRcvSegment.cc to simulations work
	For some reason, some simulations send a packet without ACK bit setted and a new packet is produced, creating a problem
	to CAIN

CAIN message is created at PATH/src/stack/mac/layer/LteMacEnb.cc, method LteMacEnb::macHandleRac (line 463)

Change antenna type:
The type is defined at PATH/src/stack/phy/LtePhy.ned (line 40)
	the types allowed are defined at PATH/src/common/LteCommon.h (lines 282 and 294)
	the parameter is defined at PATH/src/stack/phy/layer/LtePhyEnb.cc (line 66)
	this is the base of LtePhyBase
	LtePhyUe, LtePhyUeD2D, LtePhyEnb, and LtePhyEnbD2D use the same (all of them defined at the same file)
	the antenna type is used on PATH/src/stack/phy/ChannelModel/LteRealisticChannelModel.cc (lines 826 and 2415)

	Enb txPower_ param is setted at PATH/src/stack/phy/layer/LtePhyEnb.cc (lines 60~63)
	eNodeBTxPower is defined at PATH/src/stack/phy/LtePhy.ned (line 37)

Added MassiveMimo-enable and MassiveMimo-gain parameters on PAT/simulations/d2d/config_chanel.xml
	On PATH/src/stack/phy/ChannelModel/LteRealistiChannelModel.cc retieve these parameters (lines 198~202)

When initializing enb, added a code to set D2D capability to UEs
	on PATH/scr/stack/mac/layer/LteMacBase.cc binder_->setD2Dcapable(numDev); (line 319)

Commented if (binder_->hasUeHandoverTriggered(nodeId_) || binder_->hasUeHandoverTriggered(src)) (line 106)
	On PATH/scr/stack/mac/layer/LteMacBase.cc

Added code at PATH/src/stack/mac/scheduler/LteSchedulerEnbUl.cc (lines 51~55)
	if(setBuffers){
		for(int i = 1025; i < 1025+100;i++)
		    harqStatus_[i]=0;
	}
	setBuffers = false;
	and at PATH/src/stack/mac/scheduler/LteSchedulerEnbUl.h (line 33)

Commented PATH/src/stack/phy/layer/LteMacBase.cc
	lines 103

Commented PATH/src/stack/mac/layer/LteMacUeReslisticD2D.cc
	lines 149~248
