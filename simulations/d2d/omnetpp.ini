[General]
image-path=../../images
tkenv-plugin-path = ../../../inet/etc/plugins
output-scalar-file-append = false
debug-on-errors = false
tkenv-default-config = 
sim-time-limit=5s
warmup-period=0s
repeat = 3
**.routingRecorder.enabled = false

############### Statistics ##################
output-scalar-file = ${resultdir}/${configname}/${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${repetition}.vec
seed-set = ${repetition}
**.vector-recording = true

################ Channel parameters #####################
**.channelControl.pMax = 10W
**.channelControl.alpha = 1.0
**.channelControl.carrierFrequency = 2100e+6Hz

################ PhyLayer parameters #####################
**.nic.phy.channelModel=xmldoc("config_channel.xml")
**.feedbackComputation = xmldoc("config_channel.xml")

################ Mobility parameters #####################
**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m

################# Deployer parameters #######################
# UEs attached to eNB
**.fbDelay = 1

############### AMC MODULE PARAMETERS ###############
**.rbAllocationType = "localized"
**.deployer.numRbDl = 50
**.deployer.numRbUl = 50
**.numBands = 50


# ----------------------------------------------------------------------------- #
# Config "SinglePair"
#
# Do NOT run this config! It serves as base configuration for "SinglePair-UDP-*" and "SinglePair-TCP-*" configurations (see below).
# It includes two UEs served by one eNodeB. UEs are far from the eNB (~50m), but close to each other (20m)  
#
[Config SinglePair]
network=lte.simulations.networks.SingleCell_D2D

### eNodeBs configuration ###
*.eNodeB.mobility.initFromDisplayString = false
*.eNodeB.mobility.initialX = 300m
*.eNodeB.mobility.initialY = 300m

### UEs configuration ###
*.numUeCell = 0
*.numUeD2DTx = 1
*.numUeD2DRx = 1

*.ue*[0].macCellId = 1
*.ue*[0].masterId = 1
*.ue*[0].mobility.initFromDisplayString = false

# Place D2D endpoints far from the eNodeB (~50m) and close to each other (20m)
*.ueD2DTx[0].mobility.initialX = 290m
*.ueD2DTx[0].mobility.initialY = 350m
*.ueD2DRx[0].mobility.initialX = 310m
*.ueD2DRx[0].mobility.initialY = 350m


# ----------------------------------------------------------------------------- #
# Config "SinglePair-UDP-Infra"
#
# In this configuration, UEs run a VoIP application (using UDP as transport layer protocol)
# They communicate using the traditional infrastructure mode (two-hop path through the eNodeB)
#
[Config SinglePair-UDP-Infra]
extends=SinglePair


### Traffic configuration ###
*.ueD2D*[0].numUdpApps = 1

# Traffic between UEs (ueD2DTx[0] --> ueD2DRx[0])
# Transmitter
*.ueD2DTx[0].udpApp[*].typename = "VoIPSender"
*.ueD2DTx[0].udpApp[*].localPort = 3088+ancestorIndex(0) 
*.ueD2DTx[0].udpApp[*].startTime = uniform(0s,0.02s)
*.ueD2DTx[0].udpApp[*].destAddress = "ueD2DRx[0]"
*.ueD2DTx[0].udpApp[*].destPort = 1000
# Receiver
*.ueD2DRx[0].udpApp[*].typename = "VoIPReceiver"
*.ueD2DRx[0].udpApp[*].localPort = 1000

# Disable D2D for the eNodeB and the UEs
*.eNodeB.d2dCapable = false
*.ueD2D*[0].d2dCapable = false
**.**.amcMode = "AUTO"



# ----------------------------------------------------------------------------- #
# Config "SinglePair-UDP-D2D"
#
# In this configuration, UEs run a VoIP application (using UDP as transport layer protocol)
# They communicate using the D2D link
#
[Config SinglePair-UDP-D2D]
extends=SinglePair-UDP-Infra

# Enable D2D for the eNodeB and the UEs involved in direct communications
*.eNodeB.d2dCapable = true
*.ueD2D*[*].d2dCapable = true
**.amcMode = "D2D"

# --- Set the D2D peering capabilities ---#
#
# For each D2D-capable UE, write a list of UEs (separated by blank spaces)
# representing the possible peering UEs. Note that this relationship is unidirectional.
# Here, ueD2DTx[0] --> ueD2DRx[0]
*.ueD2DTx[0].nic.d2dPeerAddresses = "ueD2DRx[0]"

# --- Select CQI for D2D transmissions --- #
#
# To enable the reporting of CQIs for each D2D link, set the parameter *.eNodeB.nic.phy.enableD2DCqiReporting
# To use fixed CQI, set the parameter **.usePreconfiguredTxParams and select the desired CQI using the parameter **.d2dCqi
*.eNodeB.nic.phy.enableD2DCqiReporting = true
**.usePreconfiguredTxParams = false
**.d2dCqi = 7


# ----------------------------------------------------------------------------- #
# Config "SinglePair-TCP-Infra"
#
# In this configuration, UEs run a File Transfer application (using TCP as transport layer protocol)
# They communicate using the traditional infrastructure mode (two-hop path through the eNodeB)
#
[Config SinglePair-TCP-Infra]
extends=SinglePair

### Traffic configuration ###
*.ueD2D*[0].numTcpApps = 1

# Traffic between UEs (ueD2DTx[0] --> ueD2DRx[0])
# Transmitter
*.ueD2DTx[0].tcpApp[*].typename = "TCPSessionApp"
*.ueD2DTx[0].tcpApp[0].connectPort = 1000
*.ueD2DTx[0].tcpApp[*].localPort = 1000
*.ueD2DTx[0].tcpApp[*].sendBytes = 1GiB
*.ueD2DTx[0].tcpApp[0].active = true
*.ueD2DTx[0].tcpApp[0].tOpen = uniform(0.010s,0.1s) 
*.ueD2DTx[0].tcpApp[0].tSend = uniform(0.15s,0.5s) 
*.ueD2DTx[0].tcpApp[0].connectAddress = "ueD2DRx[0]" 
*.ueD2DTx[0].tcpApp[0].localAddress = "ueD2DTx[0]" 

# Receiver
*.ueD2DRx[0].tcpApp[*].typename = "TCPSinkApp"
*.ueD2DRx[0].tcpApp[*].localPort = 1000

**.tcpApp[*].tClose = -1s

# Disable D2D for the eNodeB and the UEs
*.eNodeB.d2dCapable = false
*.ueD2D*[0].d2dCapable = false
**.**.amcMode = "AUTO"


# ----------------------------------------------------------------------------- #
# Config "SinglePair-TCP-D2D"
#
# In this configuration, UEs run a File Transfer application (using TCP as transport layer protocol)
# They communicate using the D2D link
#
[Config SinglePair-TCP-D2D]
extends=SinglePair-TCP-Infra

# Enable D2D for the eNodeB and the UEs involved in direct communications
*.eNodeB.d2dCapable = true
*.ueD2D*[*].d2dCapable = true
**.amcMode = "D2D"

# --- Set the D2D peering capabilities ---#
#
# For each D2D-capable UE, write a list of UEs (separated by blank spaces)
# representing the possible peering UEs. Note that this relationship is unidirectional. So, it is
# necessary to set also the opposite relationship to allow the receiver to send TCP ACKs using D2D 
# i.e.: ueD2DTx[0] --> ueD2DRx[0]
#       ueD2DRx[0] --> ueD2DTx[0]
*.ueD2DTx[0].nic.d2dPeerAddresses = "ueD2DRx[0]"
*.ueD2DRx[0].nic.d2dPeerAddresses = "ueD2DTx[0]"

# --- Select CQI for D2D transmissions --- #
#
# To enable the reporting of CQIs for each D2D link, set the parameter *.eNodeB.nic.phy.enableD2DCqiReporting
# To use fixed CQI, set the parameter **.usePreconfiguredTxParams and select the desired CQI using the parameter **.d2dCqi
*.eNodeB.nic.phy.enableD2DCqiReporting = true
**.usePreconfiguredTxParams = false
**.d2dCqi = 7




###################################################################################################################################
###################################################################################################################################
###################################################################################################################################
#				CAIN configuration is based on SingleCell_D2D and TCP-D2D configurations
#
#
#
[Config CAIN]
network=lte.simulations.networks.CAIN
extends=SinglePair-TCP-Infra
repeat = 5
seed-set = ${repetition}
sim-time-limit=10s
#output-scalar-file = ${resultdir}/${configname}/${repetition}.sca
output-scalar-file = ${resultdir}/${configname}/${runnumber}-${numUe}-${repetition}.sca
output-vector-file = ${resultdir}/${configname}/${runnumber}-${numUe}-${repetition}.vec
#**.vector-recording = false

#CAIN config
**.cainNetwork = true
**.qtdThresh = 3
**.distThresh = 200

### UEs configuration ###
*.numUeCell = 0
#*.numUeD2DTx = 1
#*.numUeD2DRx = 1
#*.numUeD2DTx = 0
#*.numUeD2DRx = 2
*.numUeD2DTx = ${numUe= 20,25,30}
*.numUeD2DRx = 0

**.pwrThresh = ${pwr= -50}
**.distThresh = ${dist=200}
#**.ueD2DTx[*].mobilityType = "RandomWPMobility"
**.ueD2DTx[*].mobilityType = "BonnMotionMobility"
**.ueD2DTx[*].mobility.traceFile = ${mob="./movements/RWP-0.0.movements","./movements/RWP-0.5.movements","./movements/RPGM-0.0.movements","./movements/RPGM-0.5.movements","./movements/RWPRPGM-0.0.movements","./movements/RWPRPGM-0.5.movements"}
**.ueD2DTx[*].mobility.nodeId = -1

**.ueD2DTx[*].mobility.changeInterval = normal(5s, 0.1s)
**.ueD2DTx[*].mobility.changeAngleBy = normal(0deg, 30deg)
**.ueD2DTx[*].mobility.speed = normal(2mps, 0.01mps)

# Place D2D endpoints far from the eNodeB (~50m) and close to each other (20m)
#*.ueCell[0].mobility.initialX = 120m
#*.ueCell[0].mobility.initialY = 350m
#*.ueD2DTx[0].mobility.initialX = 290m
#*.ueD2DTx[0].mobility.initialY = 350m
#*.ueD2DRx[0].mobility.initialX = 310m
#*.ueD2DRx[0].mobility.initialY = 1000m
#*.ueD2DRx[1].mobility.initialX = 690m
#*.ueD2DRx[1].mobility.initialY = 250m
#*.ueD2DTx[0].mobility.initialX = 290m
#*.ueD2DTx[0].mobility.initialY = 350m
#*.ueD2DTx[1].mobility.initialX = 690m
#*.ueD2DTx[1].mobility.initialY = 250m
#*.ueD2DTx[2].mobility.initialX = 290m
#*.ueD2DTx[2].mobility.initialY = 500m
#*.ueD2DTx[3].mobility.initialX = 400m
#*.ueD2DTx[3].mobility.initialY = 500m
#*.ueD2DTx[4].mobility.initialX = 400m
#*.ueD2DTx[4].mobility.initialY = 350m

*.ueD2D*.numTcpApps = 1 
*.ueD2DTx*.tcpApp[*].typename = "TCPSessionApp"
*.ueD2DTx*.tcpApp[0].connectPort = 1000
*.ueD2DTx*.tcpApp[*].localPort = 1000
*.ueD2DTx*.tcpApp[*].sendBytes = 1GiB
*.ueD2DTx*.tcpApp[0].active = true
*.ueD2DTx*.tcpApp[0].tOpen = uniform(0.010s,0.1s) 
*.ueD2DTx*.tcpApp[0].tSend = uniform(0.15s,0.5s) 

#*.ueD2DTx[0].tcpApp[0].connectAddress = "ueD2DTx[1]" 
#*.ueD2DTx[0].tcpApp[0].localAddress = "ueD2DTx" 

#*.ueD2DTx[1].tcpApp[0].connectAddress = "ueD2DTx[0]" 
#*.ueD2DTx[1].tcpApp[0].localAddress = "ueD2DTx[1]" 

#*.ueD2DTx[2].tcpApp[0].connectAddress = "ueD2DTx[0]" 
#*.ueD2DTx[2].tcpApp[0].localAddress = "ueD2DTx[2]" 

*.ueD2DTx*.tcpApp[*].localAddress = "ueD2DTx"
*.ueD2DTx*.tcpApp[*].connectAddress = "ueD2DTx[0]"

### eNodeBs configuration ###
*.eNodeB.mobility.initFromDisplayString = false
*.eNodeB.mobility.initialX = 300m
*.eNodeB.mobility.initialY = 300m

*.eNodeB.txPower = 19952.62315mw
*.eNodeB1.txPower = 19952.62315mw
*.eNodeB1.mobility.initFromDisplayString = false
*.eNodeB1.mobility.initialX = 700m
*.eNodeB1.mobility.initialY = 300m

**.channelControl.pMax = 10W
**.channelControl.alpha = 2.0
**.channelControl.carrierFrequency = 28e+9Hz

*.ue*.macCellId = 1
*.ue*.masterId = 1
*.ue*.mobility.initFromDisplayString = false

**.mobility.constraintAreaMinZ = 0m
**.mobility.constraintAreaMaxZ = 0m
**.mobility.constraintAreaMinX = 0m
**.mobility.constraintAreaMaxX = 1000m
**.mobility.constraintAreaMinY = 0m
**.mobility.constraintAreaMaxY = 1000m


# Enable D2D for the eNodeB and the UEs involved in direct communications
*.eNodeB.d2dCapable = true
*.eNodeB1.d2dCapable = true
*.ueD2D*[*].d2dCapable = true
**.amcMode = "D2D"

# --- Set the D2D peering capabilities ---#
#
# For each D2D-capable UE, write a list of UEs (separated by blank spaces)
# representing the possible peering UEs. Note that this relationship is unidirectional. So, it is
# necessary to set also the opposite relationship to allow the receiver to send TCP ACKs using D2D 
# i.e.: ueD2DTx[0] --> ueD2DRx[0]
#       ueD2DRx[0] --> ueD2DTx[0]
#*.ueD2DTx[0].nic.d2dPeerAddresses = "ueD2DRx[0]"
#*.ueD2DRx[0].nic.d2dPeerAddresses = "ueD2DTx[0]"
#*.ueD2DRx[0].nic.d2dPeerAddresses = "ueD2DRx[1]"
#*.ueD2DRx[1].nic.d2dPeerAddresses = "ueD2DRx[0]"
*.ueD2DTx[0].nic.d2dPeerAddresses = "ueD2DTx[1]"
*.ueD2DTx[1].nic.d2dPeerAddresses = "ueD2DTx[0]"
# --- Select CQI for D2D transmissions --- #
#
# To enable the reporting of CQIs for each D2D link, set the parameter *.eNodeB.nic.phy.enableD2DCqiReporting
# To use fixed CQI, set the parameter **.usePreconfiguredTxParams and select the desired CQI using the parameter **.d2dCqi
*.eNodeB.nic.phy.enableD2DCqiReporting = true
*.eNodeB1.nic.phy.enableD2DCqiReporting = true
**.usePreconfiguredTxParams = false
**.d2dCqi = 7

*.numExtCells = 2

*.extCell[*].txPower = 20
*.extCell[*].txDirection = "ANISOTROPIC"
*.extCell[*].bandAllocationType = ${extAllocType="FULL_ALLOC","RANDOM_ALLOC","CONTIGUOUS_ALLOC"}
*.extCell[*].bandUtilization = 0.5

*.extCell[0].position_x = 100m
*.extCell[0].position_y = 600m 
*.extCell[0].txAngle = 315

*.extCell[1].position_x = 600m
*.extCell[1].position_y = 600m
*.extCell[1].txAngle = 225




# ----------------------------------------------------------------------------- #
# Config "MultiplePairs"
#
# Do NOT run this config! It serves as base configuration for "MultiplePairs-D2D" and "MultiplePairs-Infra" configurations (see below).
# It includes N pairs of UEs served by one eNodeB. UEs are far from the eNB (~50m), but close to each other (20m)  
#
[Config MultiplePairs]
network=lte.simulations.networks.SingleCell_D2D

### eNodeBs configuration ###
*.eNodeB.mobility.initFromDisplayString = false
*.eNodeB.mobility.initialX = 300m
*.eNodeB.mobility.initialY = 300m

### UEs configuration ###
*.numUeCell = 0
*.numUeD2DTx = ${numPairs=5,20,50}
*.numUeD2DRx = ${numPairs}

*.ue*[*].macCellId = 1
*.ue*[*].masterId = 1
*.ue*[*].mobility.initFromDisplayString = false

# Place D2D endpoints far from the eNodeB (~50m) and close to each other
*.ueD2D*[*].mobility.initialX = uniform(290m,310m)
*.ueD2D*[*].mobility.initialY = uniform(340m,350m)


# ----------------------------------------------------------------------------- #
# Config "MultiplePairs-UDP-Infra"
#
# In this configuration, UEs run a VoIP application (using UDP as transport layer protocol)
# They communicate using the traditional infrastructure mode (two-hop path through the eNodeB)
#
[Config MultiplePairs-UDP-Infra]
extends=MultiplePairs

### Traffic configuration ###
*.ueD2D*[*].numUdpApps = 1

# Traffic between pairs of UEs (e.g. ueD2DTx[0] --> ueD2DRx[0] )
# Transmitters
*.ueD2DTx[*].udpApp[*].typename = "VoIPSender"
*.ueD2DTx[*].udpApp[*].localPort = 3088+ancestorIndex(0) 
*.ueD2DTx[*].udpApp[*].startTime = uniform(0s,0.02s)
*.ueD2DTx[*].udpApp[*].destAddress = "ueD2DRx[" + string(ancestorIndex(1)) + "]"
*.ueD2DTx[*].udpApp[*].destPort = 1000
# Receivers
*.ueD2DRx[*].udpApp[*].typename = "VoIPReceiver"
*.ueD2DRx[*].udpApp[*].localPort = 1000

# Disable D2D for the eNodeB and the UEs
*.eNodeB.d2dCapable = false
*.ueD2D*[0].d2dCapable = false
**.**.amcMode = "AUTO"



# ----------------------------------------------------------------------------- #
# Config "MultiplePairs-D2D"
#
# In this configuration, UEs run a VoIP application (using UDP as transport layer protocol)
# They communicate using the D2D link
#
[Config MultiplePairs-UDP-D2D]
extends=MultiplePairs-UDP-Infra

# Enable D2D for the eNodeB and the UEs involved in direct communications
*.eNodeB.d2dCapable = true
*.ueD2D*[*].d2dCapable = true
**.amcMode = "D2D"

# --- Set the D2D peering capabilities --- #
#
# For each D2D-capable UE, write a list of UEs (separated by blank spaces)
# representing the possible peering UEs. Note that this relationship is unidirectional
# Here, ueD2DTx[0] --> ueD2DRx[0] , ueD2DTx[1] --> ueD2DRx[1] etc.
*.ueD2DTx[*].nic.d2dPeerAddresses = "ueD2DRx[" + string(ancestorIndex(1)) + "]"

# --- Select CQI for D2D transmissions --- #
#
# To enable the reporting of CQIs for each D2D link, set the parameter *.eNodeB.nic.phy.enableD2DCqiReporting
# To use fixed CQI, set the parameter **.usePreconfiguredTxParams and select the desired CQI using the parameter **.d2dCqi
*.eNodeB.nic.phy.enableD2DCqiReporting = true
**.usePreconfiguredTxParams = false
**.d2dCqi = 7




# ----------------------------------------------------------------------------- #
# Config "MultiplePairs-TCP-Infra"
#
# In this configuration, UEs run a File Transfer application (using TCP as transport layer protocol)
# They communicate using the traditional infrastructure mode (two-hop path through the eNodeB)
#
[Config MultiplePairs-TCP-Infra]
extends=MultiplePairs

### Traffic configuration ###
*.ueD2D*[*].numTcpApps = 1

# Traffic between UEs (ueD2DTx[0] --> ueD2DRx[0] etc.)
# Transmitters
*.ueD2DTx[*].tcpApp[*].typename = "TCPSessionApp"
*.ueD2DTx[*].tcpApp[*].connectPort = 1000
*.ueD2DTx[*].tcpApp[*].localPort = 1000
*.ueD2DTx[*].tcpApp[*].sendBytes = 1GiB
*.ueD2DTx[*].tcpApp[*].active = true
*.ueD2DTx[*].tcpApp[*].tOpen = uniform(0.010s,0.1s) 
*.ueD2DTx[*].tcpApp[*].tSend = uniform(0.15s,0.5s) 
*.ueD2DTx[*].tcpApp[*].connectAddress = "ueD2DRx[" + string(ancestorIndex(1)) + "]" 
*.ueD2DTx[*].tcpApp[*].localAddress = "ueD2DTx[" + string(ancestorIndex(1)) + "]" 

# Receivers
*.ueD2DRx[*].tcpApp[*].typename = "TCPSinkApp"
*.ueD2DRx[*].tcpApp[*].localPort = 1000

**.tcpApp[*].tClose = -1s


# Disable D2D for the eNodeB and the UEs
*.eNodeB.d2dCapable = false
*.ueD2D*[0].d2dCapable = false
**.**.amcMode = "AUTO"



# ----------------------------------------------------------------------------- #
# Config "MultiplePairs-TCP-D2D"
#
# In this configuration, UEs run a File Transfer application (using TCP as transport layer protocol)
# They communicate using the D2D link
#
[Config MultiplePairs-TCP-D2D]
extends=MultiplePairs-TCP-Infra

# Enable D2D for the eNodeB and the UEs involved in direct communications
*.eNodeB.d2dCapable = true
*.ueD2D*[*].d2dCapable = true
**.amcMode = "D2D"

# --- Set the D2D peering capabilities --- #
#
# For each D2D-capable UE, write a list of UEs (separated by blank spaces) representing the possible peering UEs.
# Note that this relationship is unidirectional. So, it is necessary to set also the opposite relationship 
# to allow the receiver to send TCP ACKs using D2D 
# i.e.: ueD2DTx[0] --> ueD2DRx[0]
#       ueD2DRx[0] --> ueD2DTx[0]
#       etc.
*.ueD2DTx[*].nic.d2dPeerAddresses = "ueD2DRx[" + string(ancestorIndex(1)) + "]"
*.ueD2DRx[*].nic.d2dPeerAddresses = "ueD2DTx[" + string(ancestorIndex(1)) + "]"

# --- Select CQI for D2D transmissions --- #
#
# To enable the reporting of CQIs for each D2D link, set the parameter *.eNodeB.nic.phy.enableD2DCqiReporting
# To use fixed CQI, set the parameter **.usePreconfiguredTxParams and select the desired CQI using the parameter **.d2dCqi
*.eNodeB.nic.phy.enableD2DCqiReporting = true
**.usePreconfiguredTxParams = false
**.d2dCqi = 7






# ----------------------------------------------------------------------------- #
# Config "SinglePair-modeSwitching"
#
# In this configuration, two D2D UEs have a peering established. They swing back 
# and forth in a straight line so as to cause periodical mode switching from D2D
# mode to Infrastructure mode and vice versa. In fact, the eNodeB periodically 
# selects the mode having the best CQI 
#
[Config SinglePair-modeSwitching]
network=lte.simulations.networks.SingleCell_D2D
sim-time-limit=50s
warmup-period=0s

################ PhyLayer parameters #####################
# 
# Fading and shadowing are disabled to highlight the effects of mode switching
# 
**.nic.phy.channelModel=xmldoc("config_channel_nofadshad.xml")
**.feedbackComputation = xmldoc("config_channel_nofadshad.xml")

### eNodeBs configuration ###
*.eNodeB.mobility.initFromDisplayString = false
*.eNodeB.mobility.initialX = 300m
*.eNodeB.mobility.initialY = 300m

### UEs configuration ###
*.numUeCell = 0
*.numUeD2DTx = 1
*.numUeD2DRx = 1

*.ue*[0].macCellId = 1
*.ue*[0].masterId = 1
*.ue*[0].mobility.initFromDisplayString = false
*.ue*[0].mobilityType = "LinearMobility"
*.ue*[0].mobility.speed = 10mps

# At the beginning, D2D endpoints are far from the eNodeB (~100m) and close to each other (20m)
# They swing back and forth in a straight line so as to change 
# the quality of the D2D link, whereas UL link stays almost the same
*.ueD2DTx[0].mobility.initialX = 290m
*.ueD2DTx[0].mobility.initialY = 400m
*.ueD2DTx[0].mobility.constraintAreaMinX = 200m
*.ueD2DTx[0].mobility.constraintAreaMaxX = 290m
*.ueD2DTx[0].mobility.angle = 180deg 
*.ueD2DRx[0].mobility.initialX = 310m
*.ueD2DRx[0].mobility.initialY = 400m
*.ueD2DRx[0].mobility.constraintAreaMinX = 310m
*.ueD2DRx[0].mobility.constraintAreaMaxX = 400m
*.ueD2DRx[0].mobility.angle = 0deg

# Enable D2D for the eNodeB and the UEs involved in direct communications
*.eNodeB.d2dCapable = true
*.ueD2D*[*].d2dCapable = true
**.amcMode = "D2D"

# --- Set the D2D peering capabilities ---#
*.ueD2DTx[0].nic.d2dPeerAddresses = "ueD2DRx[0]"

# --- Select CQI for D2D transmissions --- #
**.usePreconfiguredTxParams = false
*.eNodeB.nic.phy.enableD2DCqiReporting = true

# --- Enable Mode Selection algorithm --- #
# selects the mode having the best CQI 
*.eNodeB.nic.d2dMode = true
*.eNodeB.nic.d2dModeSelectionType = "D2DModeSelectionBestCqi"


# ----------------------------------------------------------------------------- #
# Config "SinglePair-modeSwitching-UDP"
#
# In this configuration, UEs run a VoIP application (using UDP as transport layer protocol)
#
[Config SinglePair-modeSwitching-UDP]
extends=SinglePair-modeSwitching

### Traffic configuration ###
*.ueD2D*[0].numUdpApps = 1

# Traffic between UEs (ueD2DTx[0] --> ueD2DRx[0])
# Transmitter
*.ueD2DTx[0].udpApp[*].typename = "VoIPSender"
*.ueD2DTx[0].udpApp[*].localPort = 3088+ancestorIndex(0) 
*.ueD2DTx[0].udpApp[*].startTime = uniform(0s,0.02s)
*.ueD2DTx[0].udpApp[*].destAddress = "ueD2DRx[0]"
*.ueD2DTx[0].udpApp[*].destPort = 1000
# Receiver
*.ueD2DRx[0].udpApp[*].typename = "VoIPReceiver"
*.ueD2DRx[0].udpApp[*].localPort = 1000



# ----------------------------------------------------------------------------- #
# Config "SinglePair-modeSwitching-TCP"
#
# In this configuration, UEs run a File Transfer application (using TCP as transport layer protocol)
#
[Config SinglePair-modeSwitching-TCP]
extends=SinglePair-modeSwitching

# --- Set the D2D peering capability also for the ACK flow ---#
*.ueD2DRx[0].nic.d2dPeerAddresses = "ueD2DTx[0]"

### Traffic configuration ###
*.ueD2D*[0].numTcpApps = 1

# Traffic between UEs (ueD2DTx[0] --> ueD2DRx[0])
# Transmitter
*.ueD2DTx[0].tcpApp[0].typename = "TCPSessionApp"
*.ueD2DTx[0].tcpApp[0].connectPort = 1000
*.ueD2DTx[0].tcpApp[0].localPort = 1000
*.ueD2DTx[0].tcpApp[0].sendBytes = 1GiB
*.ueD2DTx[0].tcpApp[0].active = true
*.ueD2DTx[0].tcpApp[0].tOpen = uniform(0.010s,0.1s) 
*.ueD2DTx[0].tcpApp[0].tSend = uniform(0.15s,0.5s) 
*.ueD2DTx[0].tcpApp[0].connectAddress = "ueD2DRx[0]" 
*.ueD2DTx[0].tcpApp[0].localAddress = "ueD2DTx[0]" 

# Receiver
*.ueD2DRx[0].tcpApp[0].typename = "TCPSinkApp"
*.ueD2DRx[0].tcpApp[0].localPort = 1000

**.tcpApp[*].tClose = -1s