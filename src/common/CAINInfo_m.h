//
// Generated file, do not edit! Created by nedtool 5.0 from common/CAINInfo.msg.
//

#ifndef __CAININFO_M_H
#define __CAININFO_M_H

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0500
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



// cplusplus {{
    #include "common/LteCommon.h"
// }}

/**
 * Class generated from <tt>common/CAINInfo.msg:27</tt> by nedtool.
 * <pre>
 * packet CAINInfo
 * {
 *     uint16 sourceId;								// Source MacNodeId
 *     uint16 destId;									// Destination MacNodeId
 *     unsigned short direction @enum(CAINDirection); 	// Traffic Direction (REL, REP)
 *     unsigned short frameType @enum(LtePhyFrameType);	// Type of frame
 * }
 * </pre>
 */
class CAINInfo : public ::omnetpp::cPacket
{
  protected:
    uint16_t sourceId;
    uint16_t destId;
    unsigned short direction;
    unsigned short frameType;

  private:
    void copy(const CAINInfo& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const CAINInfo&);

  public:
    CAINInfo(const char *name=nullptr, int kind=0);
    CAINInfo(const CAINInfo& other);
    virtual ~CAINInfo();
    CAINInfo& operator=(const CAINInfo& other);
    virtual CAINInfo *dup() const {return new CAINInfo(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b);

    // field getter/setter methods
    virtual uint16_t getSourceId() const;
    virtual void setSourceId(uint16_t sourceId);
    virtual uint16_t getDestId() const;
    virtual void setDestId(uint16_t destId);
    virtual unsigned short getDirection() const;
    virtual void setDirection(unsigned short direction);
    virtual unsigned short getFrameType() const;
    virtual void setFrameType(unsigned short frameType);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const CAINInfo& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, CAINInfo& obj) {obj.parsimUnpack(b);}


#endif // ifndef __CAININFO_M_H

